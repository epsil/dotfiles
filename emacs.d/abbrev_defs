;;-*-coding: utf-8;-*-
(define-abbrev-table 'Buffer-menu-mode-abbrev-table '())

(define-abbrev-table 'comint-mode-abbrev-table '())

(define-abbrev-table 'completion-list-mode-abbrev-table '())

(define-abbrev-table 'diskusjon-mode-abbrev-table '())

(define-abbrev-table 'emacs-lisp-byte-code-mode-abbrev-table '())

(define-abbrev-table 'emacs-lisp-mode-abbrev-table '())

(define-abbrev-table 'ert-results-mode-abbrev-table '())

(define-abbrev-table 'ert-simple-view-mode-abbrev-table '())

(define-abbrev-table 'fundamental-mode-abbrev-table '())

(define-abbrev-table 'gfm-mode-abbrev-table '())

(define-abbrev-table 'global-abbrev-table '())

(define-abbrev-table 'inferior-maude-mode-abbrev-table '())

(define-abbrev-table 'inferior-python-mode-abbrev-table '())

(define-abbrev-table 'lisp-mode-abbrev-table '())

(define-abbrev-table 'markdown-mode-abbrev-table '())

(define-abbrev-table 'maude-mode-abbrev-table
  '(
    ("assoc" "[assoc]" maude-mode-join-attributes 0)
    ("associative" "[assoc]" maude-mode-join-attributes 0)
    ("comm" "[comm]" maude-mode-join-attributes 0)
    ("commutative" "[comm]" maude-mode-join-attributes 0)
    ("ctor" "[ctor]" maude-mode-join-attributes 0)
    ("ditto" "[ditto]" maude-mode-join-attributes 0)
    ("endfm" "endfm" (lambda nil (save-excursion (indent-line-to 0))) 0)
    ("endfth" "endfth" (lambda nil (save-excursion (indent-line-to 0))) 0)
    ("endm" "endm" (lambda nil (save-excursion (indent-line-to 0))) 0)
    ("endom" "endom" (lambda nil (save-excursion (indent-line-to 0))) 0)
    ("endoth" "endoth" (lambda nil (save-excursion (indent-line-to 0))) 0)
    ("endth" "endth" (lambda nil (save-excursion (indent-line-to 0))) 0)
    ("endv" "endv" (lambda nil (save-excursion (indent-line-to 0))) 0)
    ("fmod" "fmod" (lambda nil (save-excursion (indent-line-to 0))) 0)
    ("format" "[format ()]" (lambda nil (maude-mode-join-attributes) (maude-mode-place-after "format (")) 0)
    ("frozen" "[frozen]" (lambda nil (maude-mode-join-attributes) (maude-mode-place-after "frozen")) 0)
    ("fth" "fth" (lambda nil (save-excursion (indent-line-to 0))) 0)
    ("gather" "[gather ()]" (lambda nil (maude-mode-join-attributes) (maude-mode-place-after "gather (")) 0)
    ("id" "[id:]" (lambda nil (maude-mode-join-attributes) (maude-mode-place-after "id:")) 0)
    ("idem" "[idem]" maude-mode-join-attributes 0)
    ("iter" "[iter]" maude-mode-join-attributes 0)
    ("label" "[label]" (lambda nil (maude-mode-join-attributes) (maude-mode-place-after "label")) 0)
    ("left" "[left id:]" (lambda nil (maude-mode-join-attributes) (maude-mode-place-after "id:")) 0)
    ("list" "[assoc right id:]" (lambda nil (maude-mode-join-attributes) (maude-mode-place-after "id:")) 0)
    ("memo" "[memo]" maude-mode-join-attributes 0)
    ("metadata" "[metadata]" (lambda nil (maude-mode-join-attributes) (maude-mode-place-after "metadata")) 0)
    ("mod" "mod" (lambda nil (save-excursion (indent-line-to 0))) 0)
    ("mset" "[comm assoc id:]" (lambda nil (maude-mode-join-attributes) (maude-mode-place-after "id:")) 0)
    ("nonexec" "[nonexec]" maude-mode-join-attributes 0)
    ("omod" "omod" (lambda nil (save-excursion (indent-line-to 0))) 0)
    ("oth" "oth" (lambda nil (save-excursion (indent-line-to 0))) 0)
    ("otherwise" "[owise]" maude-mode-join-attributes 0)
    ("owise" "[owise]" maude-mode-join-attributes 0)
    ("poly" "[poly]" maude-mode-join-attributes 0)
    ("prec" "[prec]" (lambda nil (maude-mode-join-attributes) (maude-mode-place-after "prec")) 0)
    ("right" "[right id:]" (lambda nil (maude-mode-join-attributes) (maude-mode-place-after "id:")) 0)
    ("set" "[comm assoc idem]" maude-mode-join-attributes 0)
    ("special" "[special ()]" (lambda nil (maude-mode-join-attributes) (maude-mode-place-after "special (")) 0)
    ("strat" "[strat ()]" (lambda nil (maude-mode-join-attributes) (maude-mode-place-after "strat (")) 0)
    ("th" "th" (lambda nil (save-excursion (indent-line-to 0))) 0)
    ("view" "view" (lambda nil (save-excursion (indent-line-to 0))) 0)
   ))

(define-abbrev-table 'mediawiki-draft-mode-abbrev-table '())

(define-abbrev-table 'mediawiki-mode-abbrev-table '())

(define-abbrev-table 'occur-edit-mode-abbrev-table '())

(define-abbrev-table 'occur-mode-abbrev-table '())

(define-abbrev-table 'outline-mode-abbrev-table '())

(define-abbrev-table 'package-menu-mode-abbrev-table '())

(define-abbrev-table 'process-menu-mode-abbrev-table '())

(define-abbrev-table 'prog-mode-abbrev-table '())

(define-abbrev-table 'python-mode-abbrev-table
  '(
    ("class" "" python-skeleton-class 0)
    ("def" "" python-skeleton-def 0)
    ("for" "" python-skeleton-for 0)
    ("if" "" python-skeleton-if 0)
    ("try" "" python-skeleton-try 0)
    ("while" "" python-skeleton-while 0)
   ))

(define-abbrev-table 'shell-mode-abbrev-table '())

(define-abbrev-table 'special-mode-abbrev-table '())

(define-abbrev-table 'tabulated-list-mode-abbrev-table '())

(define-abbrev-table 'text-mode-abbrev-table '())

(define-abbrev-table 'vc-git-log-edit-mode-abbrev-table '())

(define-abbrev-table 'vc-git-log-view-mode-abbrev-table '())

